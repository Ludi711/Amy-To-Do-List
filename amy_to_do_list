{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff11c2a7-205f-4b66-8c80-5d1e7c2daf94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "You are \"Pixel\", Amy's AI personal assistant.\n",
      "\n",
      "Write a concise, clear email summarizing her tasks for the day. Be warm and friendly, but keep the tone efficient â€” no unnecessary intro or fluff. Just a light greeting, a brief sentence or two introducing the task list, then clearly present each section.\n",
      "\n",
      "Highlight high-priority tasks where appropriate. End with a single uplifting quote or affirmation. Sign off as Pixel.\n",
      "\n",
      "The ocassional emoji throughout might be nice to make the email look less boring to the eyes.\n",
      "\n",
      "ðŸŸ¥ Overdue Tasks:\n",
      "- None\n",
      "\n",
      "ðŸŸ© Tasks Due Today:\n",
      "- None\n",
      "\n",
      "ðŸ“… Upcoming (next 3 days):\n",
      "- None\n",
      "\n",
      "Subject: Your Task-Free Day Ahead! ðŸ˜Š\n",
      "\n",
      "Hi Amy,\n",
      "\n",
      "Good news! You don't have any tasks due today, and there are no overdue or upcoming tasks. Enjoy the freedom to focus on what matters most to you today. \n",
      "\n",
      "\"Today is full of endless possibilities.\" \n",
      "\n",
      "Have a wonderful day!\n",
      "\n",
      "Best,  \n",
      "Pixel âœ¨\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\n\\nimport schedule\\nimport time\\n\\n# Schedule for 6:00 AM daily\\nschedule.every().day.at(\"06:00\").do(lambda: send_task_email(email_body, \"amy.lou.wils@gmail.com\"))\\n\\nwhile True:\\n    schedule.run_pending()\\n    time.sleep(60)\\n\\n'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import gspread\n",
    "import os\n",
    "import json\n",
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "from datetime import datetime\n",
    "\n",
    "# Define Google Sheets API scope\n",
    "scope = [\n",
    "    \"https://spreadsheets.google.com/feeds\",\n",
    "    \"https://www.googleapis.com/auth/spreadsheets\",\n",
    "    \"https://www.googleapis.com/auth/drive\"\n",
    "]\n",
    "\n",
    "# Load credentials\n",
    "creds_dict = json.loads(os.environ[\"GOOGLE_CREDS_JSON\"])\n",
    "creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)\n",
    "\n",
    "client = gspread.authorize(creds)\n",
    "\n",
    "# Open your Google Sheet (sheet name must match exactly)\n",
    "sheet = client.open(\"Amy - To Do List\").sheet1\n",
    "\n",
    "# Load task records\n",
    "data = sheet.get_all_records()\n",
    "\n",
    "# Convert to DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Clean up dates and completed column\n",
    "df['Due Date'] = pd.to_datetime(df['Due Date'], errors='coerce')\n",
    "df['Completed?'] = df['Completed?'].astype(str).str.strip().str.upper() == 'TRUE'\n",
    "\n",
    "df.head()\n",
    "\n",
    "# Drop empty tasks\n",
    "df = df.dropna(subset=['Task', 'Due Date'])\n",
    "\n",
    "# Today\n",
    "today = pd.Timestamp(datetime.now().date())\n",
    "\n",
    "# Filter incomplete tasks\n",
    "incomplete_df = df[df['Completed?'] == False]\n",
    "\n",
    "# Grouping\n",
    "overdue = incomplete_df[incomplete_df['Due Date'] < today]\n",
    "due_today = incomplete_df[incomplete_df['Due Date'] == today]\n",
    "upcoming = incomplete_df[\n",
    "    (incomplete_df['Due Date'] > today) &\n",
    "    (incomplete_df['Due Date'] <= today + pd.Timedelta(days=3))\n",
    "]\n",
    "\n",
    "\n",
    "def format_tasks(df):\n",
    "    # Sort by priority: High â†’ Medium â†’ Low\n",
    "    priority_order = {'High': 0, 'Medium': 1, 'Low': 2}\n",
    "    df = df.copy()\n",
    "    df['PriorityOrder'] = df['Priority'].map(priority_order)\n",
    "    df = df.sort_values(by='PriorityOrder')\n",
    "\n",
    "    return \"\\n\".join(\n",
    "        f\"- {row['Task']} (Priority: {row['Priority']}, due {row['Due Date'].date()})\"\n",
    "        for _, row in df.iterrows()\n",
    "    )\n",
    "\n",
    "\n",
    "# Format each section\n",
    "overdue_text = format_tasks(overdue)\n",
    "today_text = format_tasks(due_today)\n",
    "upcoming_text = format_tasks(upcoming)\n",
    "\n",
    "# Add task counts\n",
    "overdue_count = len(overdue)\n",
    "today_count = len(due_today)\n",
    "upcoming_count = len(upcoming)\n",
    "\n",
    "\n",
    "# Final prompt for ChatGPT\n",
    "prompt = f\"\"\"\n",
    "You are \"Pixel\", Amy's AI personal assistant.\n",
    "\n",
    "Write a concise, clear email summarizing her tasks for the day. Be warm and friendly, but keep the tone efficient â€” no unnecessary intro or fluff. Just a light greeting and helpful task summary.\n",
    "\n",
    "At the top of the email, include a one-line summary like:\n",
    "\"You have 1 overdue task, 2 due today, and 3 coming up.\"\n",
    "\n",
    "Then present the tasks by category, sorted by priority.\n",
    "\n",
    "ðŸŸ¥ Overdue Tasks ({overdue_count}):\n",
    "{overdue_text or '- None'}\n",
    "\n",
    "ðŸŸ© Tasks Due Today ({today_count}):\n",
    "{today_text or '- None'}\n",
    "\n",
    "ðŸ“… Upcoming (next 3 days) ({upcoming_count}):\n",
    "{upcoming_text or '- None'}\n",
    "\n",
    "End with a single uplifting quote or affirmation. Sign off as Pixel.\n",
    "\"\"\"\n",
    "\n",
    "print(prompt)\n",
    "\n",
    "from openai import OpenAI\n",
    "\n",
    "client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n",
    "\n",
    "\n",
    "response = client.chat.completions.create(\n",
    "    model=\"gpt-4o\",\n",
    "    messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "    temperature=0.7\n",
    ")\n",
    "\n",
    "email_body = response.choices[0].message.content\n",
    "print(email_body)\n",
    "\n",
    "\n",
    "\n",
    "import smtplib\n",
    "from email.message import EmailMessage\n",
    "\n",
    "# Compose the email\n",
    "def send_task_email(email_body, to_address):\n",
    "    msg = EmailMessage()\n",
    "    msg['Subject'] = \"To Do List! ðŸ§ \"\n",
    "    msg['From'] = \"goodhewwill@gmail.com\"\n",
    "    msg['To'] = to_address\n",
    "    msg.set_content(email_body)\n",
    "\n",
    "    with smtplib.SMTP('smtp.gmail.com', 587) as smtp:\n",
    "        smtp.starttls()\n",
    "        smtp.login(\"goodhewwill@gmail.com\", \"your-app-password\")\n",
    "        smtp.send_message(msg)\n",
    "\n",
    "# Then call:\n",
    "send_task_email(email_body, \"amy.lou.wils@gmail.com\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5533b10a-320a-434e-bbdb-4f3f8920b521",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f435923d-499f-48db-87b1-38389d13b71c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
